/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
} from './Evidence';
import type { Logic } from './Logic';
import {
    LogicFromJSON,
    LogicFromJSONTyped,
    LogicToJSON,
} from './Logic';
import type { Options } from './Options';
import {
    OptionsFromJSON,
    OptionsFromJSONTyped,
    OptionsToJSON,
} from './Options';

/**
 * Pydantic model for a step in a case record.
 * @export
 * @interface Step
 */
export interface Step {
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    question: string;
    /**
     * 
     * @type {Options}
     * @memberof Step
     */
    options?: Options;
    /**
     * 
     * @type {Logic}
     * @memberof Step
     */
    logic?: Logic;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    reasoning: string;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    decision: string;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    nextStep: string;
    /**
     * 
     * @type {boolean}
     * @memberof Step
     */
    isMet: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Step
     */
    isFinal: boolean;
    /**
     * 
     * @type {Evidence}
     * @memberof Step
     */
    evidence?: Evidence;
}

/**
 * Check if a given object implements the Step interface.
 */
export function instanceOfStep(value: object): boolean {
    if (!('key' in value)) return false;
    if (!('question' in value)) return false;
    if (!('reasoning' in value)) return false;
    if (!('decision' in value)) return false;
    if (!('nextStep' in value)) return false;
    if (!('isMet' in value)) return false;
    if (!('isFinal' in value)) return false;
    return true;
}

export function StepFromJSON(json: any): Step {
    return StepFromJSONTyped(json, false);
}

export function StepFromJSONTyped(json: any, ignoreDiscriminator: boolean): Step {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'],
        'question': json['question'],
        'options': json['options'] == null ? undefined : OptionsFromJSON(json['options']),
        'logic': json['logic'] == null ? undefined : LogicFromJSON(json['logic']),
        'reasoning': json['reasoning'],
        'decision': json['decision'],
        'nextStep': json['next_step'],
        'isMet': json['is_met'],
        'isFinal': json['is_final'],
        'evidence': json['evidence'] == null ? undefined : EvidenceFromJSON(json['evidence']),
    };
}

export function StepToJSON(value?: Step | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'key': value['key'],
        'question': value['question'],
        'options': OptionsToJSON(value['options']),
        'logic': LogicToJSON(value['logic']),
        'reasoning': value['reasoning'],
        'decision': value['decision'],
        'next_step': value['nextStep'],
        'is_met': value['isMet'],
        'is_final': value['isFinal'],
        'evidence': EvidenceToJSON(value['evidence']),
    };
}

