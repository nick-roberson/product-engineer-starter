/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Case,
  CreateCaseResponse,
  HTTPValidationError,
  QueryCasesRequest,
} from '../models/index';
import {
    CaseFromJSON,
    CaseToJSON,
    CreateCaseResponseFromJSON,
    CreateCaseResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    QueryCasesRequestFromJSON,
    QueryCasesRequestToJSON,
} from '../models/index';

export interface GetCaseCasesCaseIdGetRequest {
    caseId: string;
}

export interface GetCasesCasesQueryPostRequest {
    queryCasesRequest: QueryCasesRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new case record, and return the id of the new case. Then move to process the case in the background.  Returns:     CreateCaseResponse: The id of the new case.
     * Create Case
     */
    async createCaseCasesPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCaseResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case record, and return the id of the new case. Then move to process the case in the background.  Returns:     CreateCaseResponse: The id of the new case.
     * Create Case
     */
    async createCaseCasesPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCaseResponse> {
        const response = await this.createCaseCasesPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a case record by id.  Args:     case_id (str): The id of the case to retrieve. Returns:     Case: A Case object representing the case record. Raises:     HTTPException: If the case is not found.     HTTPException: If there is an error parsing the case.
     * Get Case
     */
    async getCaseCasesCaseIdGetRaw(requestParameters: GetCaseCasesCaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Case>> {
        if (requestParameters['caseId'] == null) {
            throw new runtime.RequiredError(
                'caseId',
                'Required parameter "caseId" was null or undefined when calling getCaseCasesCaseIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cases/{case_id}`.replace(`{${"case_id"}}`, encodeURIComponent(String(requestParameters['caseId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaseFromJSON(jsonValue));
    }

    /**
     * Retrieve a case record by id.  Args:     case_id (str): The id of the case to retrieve. Returns:     Case: A Case object representing the case record. Raises:     HTTPException: If the case is not found.     HTTPException: If there is an error parsing the case.
     * Get Case
     */
    async getCaseCasesCaseIdGet(requestParameters: GetCaseCasesCaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Case> {
        const response = await this.getCaseCasesCaseIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve case records by query parameters. An example body request to this endpoint would be:      {         \"case_ids\": [\"case-id-1\", \"case-id-2\"],         \"status\": \"submitted\",         \"procedure_name\": \"Procedure 1\",         \"is_met\": true,         \"is_complete\": false,     }  Args:     query (QueryCasesRequest): The query parameters. Returns:     List[Case]: The case records. Raises:     HTTPException: If the cases are not found.     HTTPException: If there is an error parsing the cases.
     * Get Cases
     */
    async getCasesCasesQueryPostRaw(requestParameters: GetCasesCasesQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Case>>> {
        if (requestParameters['queryCasesRequest'] == null) {
            throw new runtime.RequiredError(
                'queryCasesRequest',
                'Required parameter "queryCasesRequest" was null or undefined when calling getCasesCasesQueryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cases/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryCasesRequestToJSON(requestParameters['queryCasesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CaseFromJSON));
    }

    /**
     * Retrieve case records by query parameters. An example body request to this endpoint would be:      {         \"case_ids\": [\"case-id-1\", \"case-id-2\"],         \"status\": \"submitted\",         \"procedure_name\": \"Procedure 1\",         \"is_met\": true,         \"is_complete\": false,     }  Args:     query (QueryCasesRequest): The query parameters. Returns:     List[Case]: The case records. Raises:     HTTPException: If the cases are not found.     HTTPException: If there is an error parsing the cases.
     * Get Cases
     */
    async getCasesCasesQueryPost(requestParameters: GetCasesCasesQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Case>> {
        const response = await this.getCasesCasesQueryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check endpoint
     * Health
     */
    async healthHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Health check endpoint
     * Health
     */
    async healthHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Default endpoint
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Default endpoint
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

}
