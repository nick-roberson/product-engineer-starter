/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Case,
  HTTPValidationError,
} from '../models/index';
import {
    CaseFromJSON,
    CaseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetCaseCasesCaseIdGetRequest {
    caseId: number;
}

export interface GetCasesCasesGetRequest {
    requestBody: Array<number>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new case record, and return the id of the new case.  Returns:     Dict: A dictionary containing the id of the new case.
     * Create Case
     */
    async createCaseCasesPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a new case record, and return the id of the new case.  Returns:     Dict: A dictionary containing the id of the new case.
     * Create Case
     */
    async createCaseCasesPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createCaseCasesPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a case record by id.  Args:     case_id (int): The id of the case to retrieve. Returns:     Case: A Case object representing the case record.
     * Get Case
     */
    async getCaseCasesCaseIdGetRaw(requestParameters: GetCaseCasesCaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Case>> {
        if (requestParameters['caseId'] == null) {
            throw new runtime.RequiredError(
                'caseId',
                'Required parameter "caseId" was null or undefined when calling getCaseCasesCaseIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cases/{case_id}`.replace(`{${"case_id"}}`, encodeURIComponent(String(requestParameters['caseId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaseFromJSON(jsonValue));
    }

    /**
     * Retrieve a case record by id.  Args:     case_id (int): The id of the case to retrieve. Returns:     Case: A Case object representing the case record.
     * Get Case
     */
    async getCaseCasesCaseIdGet(requestParameters: GetCaseCasesCaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Case> {
        const response = await this.getCaseCasesCaseIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve multiple case records by id.  Args:     case_ids (List[int]): A list of case ids to retrieve. Returns:     Case: A list of Case objects representing the case records.
     * Get Cases
     */
    async getCasesCasesGetRaw(requestParameters: GetCasesCasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Case>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling getCasesCasesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CaseFromJSON));
    }

    /**
     * Retrieve multiple case records by id.  Args:     case_ids (List[int]): A list of case ids to retrieve. Returns:     Case: A list of Case objects representing the case records.
     * Get Cases
     */
    async getCasesCasesGet(requestParameters: GetCasesCasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Case>> {
        const response = await this.getCasesCasesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check route
     * Health
     */
    async healthHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Health check route
     * Health
     */
    async healthHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Default route
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Default route
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

}
